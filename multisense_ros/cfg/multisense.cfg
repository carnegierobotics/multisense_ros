#!/usr/bin/env python
PACKAGE = "multisense_ros"
import os
import roslib;roslib.load_manifest(PACKAGE)

if os.path.isfile('../../stack.xml'):
    from dynamic_reconfigure.parameter_generator import *
else:
    from dynamic_reconfigure.parameter_generator_catkin import *

class SensorConfig(object):
    def __init__(self, name=None, sgm=False, motor=False, imu=False, lighting=False, aux=False, ar0234=False):
        self.name     = name
        self.sgm      = sgm
        self.motor    = motor
        self.imu      = imu
        self.lighting = lighting
        self.aux      = aux
        self.ar0234   = ar0234
    #enddef
#endclass

sensorConfigList = []
sensorConfigList.append(SensorConfig(name="sl_bm_cmv2000",      sgm=False, motor=True,  imu=False, lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="sl_bm_cmv2000_imu",  sgm=False, motor=True,  imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="sl_bm_cmv4000",      sgm=False, motor=True,  imu=False, lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="sl_bm_cmv4000_imu",  sgm=False, motor=True,  imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="sl_sgm_cmv2000_imu", sgm=True,  motor=True,  imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="sl_sgm_cmv4000_imu", sgm=True,  motor=True,  imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="st21_sgm_vga_imu",   sgm=True,  motor=False, imu=True , lighting=False, aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="mono_cmv2000",       sgm=False, motor=False, imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="mono_cmv4000",       sgm=False, motor=False, imu=True , lighting=True , aux=False, ar0234=False))
sensorConfigList.append(SensorConfig(name="s27_sgm_AR0234",     sgm=True,  motor=False, imu=False, lighting=False, aux=True, ar0234=True))
sensorConfigList.append(SensorConfig(name="ks21_sgm_AR0234",    sgm=True,  motor=False, imu=False, lighting=True , aux=False, ar0234=True))

for cfg in sensorConfigList:
    gen = ParameterGenerator()

    roi_width = None
    roi_height = None
    auto_exposure_threshold = 0.75

    if cfg.name.find('sgm_cmv2000') != -1:
        res_enum = gen.enum([ gen.const("1024x272_64_disparities", str_t, "1024x272x64", "1024x272x64"),
                              gen.const("1024x272_128_disparities", str_t, "1024x272x128", "1024x272x128"),
                              gen.const("1024x272_256_disparities", str_t, "1024x272x256", "1024x272x256"),
                              gen.const("1024x544_64_disparities", str_t, "1024x544x64", "1024x544x64"),
                              gen.const("1024x544_128_disparities", str_t, "1024x544x128", "1024x544x128"),
                              gen.const("1024x544_256_disparities", str_t, "1024x544x256", "1024x544x256"),
                              gen.const("2048x544_64_disparities", str_t, "2048x544x64", "2048x544x64"),
                              gen.const("2048x544_128_disparities", str_t, "2048x544x128", "2048x544x128"),
                              gen.const("2048x544_256_disparities", str_t, "2048x544x256", "2048x544x256"),
                              gen.const("2048x1088_64_disparities", str_t, "2048x1088x64", "2048x1088x64"),
                              gen.const("2048x1088_128_disparities", str_t, "2048x1088x128", "2048x1088x128"),
                              gen.const("2048x1088_256_disparities", str_t, "2048x1088x256", "2048x1088x256") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x544x128", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 10.0, 1.0, 30.0)
        roi_width = 2048
        roi_height = 1088
    elif cfg.name.find('sgm_cmv4000') != -1:
        res_enum = gen.enum([ gen.const("1024x512_64_disparities", str_t, "1024x512x64", "1024x512x64"),
                              gen.const("1024x512_128_disparities", str_t, "1024x512x128", "1024x512x128"),
                              gen.const("1024x512_256_disparities", str_t, "1024x512x256", "1024x512x256"),
                              gen.const("1024x1024_64_disparities", str_t, "1024x1024x64", "1024x1024x64"),
                              gen.const("1024x1024_128_disparities", str_t, "1024x1024x128", "1024x1024x128"),
                              gen.const("1024x1024_256_disparities", str_t, "1024x1024x256", "1024x1024x256"),
                              gen.const("2048x1024_64_disparities", str_t, "2048x1024x64", "2048x1024x64"),
                              gen.const("2048x1024_128_disparities", str_t, "2048x1024x128", "2048x1024x128"),
                              gen.const("2048x1024_256_disparities", str_t, "2048x1024x256", "2048x1024x256"),
                              gen.const("2048x2048_64_disparities", str_t, "2048x2048x64", "2048x2048x64"),
                              gen.const("2048x2048_128_disparities", str_t, "2048x2048x128", "2048x2048x128"),
                              gen.const("2048x2048_256_disparities", str_t, "2048x2048x256", "2048x2048x256") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x1024x128", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 5.0, 1.0, 15.0)
        roi_width = 2048
        roi_height = 2048
    elif cfg.name.find('bm_cmv2000') != -1:
        res_enum = gen.enum([ gen.const("1024x544_128_disparities", str_t, "1024x544x128", "1024x544x128"),
                              gen.const("2048x1088_No_disparities", str_t, "2048x1088x0", "2048x1088x0") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x544x128", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 10.0, 1.0, 30.0)
        roi_width = 2048
        roi_height = 1088
    elif cfg.name.find('bm_cmv4000') != -1:
        res_enum = gen.enum([ gen.const("1024x1024_128_disparities", str_t, "1024x1024x128", "1024x1024x128"),
                              gen.const("2048x2048_No_disparities", str_t, "2048x2048x0", "2048x2048x0") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x1024x128", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 5.0, 1.0, 15.0)
        roi_width = 2048
        roi_height = 2048
    elif cfg.name.find('st21_sgm_vga_imu') != -1:
        res_enum = gen.enum([ gen.const("640x512_64_disparities", str_t, "640x512x64", "640x512x64"),
                              gen.const("640x512_128_disparities", str_t, "640x512x128", "640x512x128") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "640x512x128", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 29.97, 20.0, 29.97)
    elif cfg.name.find('mono_cmv2000') != -1:
        res_enum = gen.enum([ gen.const("1024x272", str_t, "1024x272x0", "1024x272x0"),
                              gen.const("1024x544", str_t, "1024x544x0", "1024x544x0"),
                              gen.const("2048x544", str_t, "2048x544x0", "2048x544x0"),
                              gen.const("2048x1088", str_t, "2048x1088x0", "2048x1088x0") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x544x0", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 10.0, 1.0, 30.0)
        roi_width = 2048
        roi_height = 1088
    elif cfg.name.find('mono_cmv4000') != -1:
        res_enum = gen.enum([ gen.const("1024x512", str_t, "1024x512x0", "1024x512x0"),
                              gen.const("1024x1024", str_t, "1024x1024x0", "1024x1024x0"),
                              gen.const("2048x1024", str_t, "2048x1024x0", "2048x1024x0"),
                              gen.const("2048x2048", str_t, "2048x2048x0", "2048x2048x0") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "1024x1024x0", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 5.0, 1.0, 15.0)
        roi_width = 2048
        roi_height = 2048
    elif cfg.ar0234:
        res_enum = gen.enum([ gen.const("960x600_256_disparities", str_t, "960x600x256", "960x600x256"),
                              gen.const("1920x1200_64_disparities", str_t, "1920x1200x64", "1920x1200x64"),
                              gen.const("1920x1200_128_disparities", str_t, "1920x1200x128", "1920x1200x128"),
                              gen.const("1920x1200_256_disparities", str_t, "1920x1200x256", "1920x1200x256") ],
                            "Available resolution settings")
        gen.add("resolution", str_t, 0, "sensor resolution", "960x600x256", edit_method=res_enum)
        gen.add("fps", double_t, 0, "FPS", 10.0, 1.0, 64.0)
        roi_width = 1920
        roi_height = 1200
        auto_exposure_threshold = 0.95
    #endif

    if cfg.name.find('st21_sgm_vga_imu') == -1:
        gen.add("desired_transmit_delay", int_t, 0, "desired_transmit_delay (ms)", 0, 0, 500)
    #endif

    if cfg.name.find('sgm_cmv4000') != -1:
        gen.add("crop_mode", bool_t, 0, "Crop image to 2MP", False)
        gen.add("crop_offset", int_t, 0, "Crop Offset", 480, 0, 960)
    #endif

    if cfg.name.find('st21_sgm_vga_imu') == -1:
        gen.add("gain", double_t, 0, "SensorGain", 1.0, 1.0, 8.0)
        gen.add("auto_exposure", bool_t, 0, "AutoExposure", True)
        gen.add("auto_exposure_max_time", double_t, 0, "AutoExposureMaxTime", 0.5, 0.0, 0.5);
        gen.add("auto_exposure_decay", int_t, 0, "AutoExposureDecay", 7, 0, 20)
        gen.add("auto_exposure_thresh", double_t, 0, "AutoExposureThresh", auto_exposure_threshold, 0.0, 1.0)
        gen.add("auto_exposure_target_intensity", double_t, 0, "AutoExposureTargetIntensity", 0.5, 0.0, 1.0)
        gen.add("exposure_time", double_t, 0, "Exposure", 0.025, 0, 0.5)

        if not cfg.ar0234:
            gen.add("auto_white_balance", bool_t, 0, "AutoWhiteBalance", True)
            gen.add("auto_white_balance_decay", int_t, 0, "AutoWhiteBalanceDecay", 3, 0, 20)
            gen.add("auto_white_balance_thresh", double_t, 0, "AutoWhiteBalanceThresh", 0.5, 0.0, 1.0)
            gen.add("white_balance_red", double_t, 0, "WhiteBalanceScaleRed", 1.0, 0.25, 4.0)
            gen.add("white_balance_blue", double_t, 0, "WhiteBalanceScaleBlue", 1.0, 0.25, 4.0)
            gen.add("hdr_enable", bool_t, 0, "HDR Enable", False)
        #endif

        if roi_width is not None and roi_height is not None:
            gen.add("roi_auto_exposure", bool_t, 0, "RoiAutoExposure", False)
            gen.add("roi_auto_exposure_x", int_t, 0, "RoiAutoExposureX", 0, 0, roi_width)
            gen.add("roi_auto_exposure_y", int_t, 0, "RoiAutoExposureY", 0, 0, roi_height)
            gen.add("roi_auto_exposure_width", int_t, 0, "RoiAutoExposureWidth", 0, 0, roi_width)
            gen.add("roi_auto_exposure_height", int_t, 0, "RoiAutoExposureHeight", 0, 0, roi_height)
    #endif

    if cfg.aux:
        gen.add("auto_white_balance", bool_t, 0, "AutoWhiteBalance", True)
        gen.add("auto_white_balance_decay", int_t, 0, "AutoWhiteBalanceDecay", 3, 0, 20)
        gen.add("auto_white_balance_thresh", double_t, 0, "AutoWhiteBalanceThresh", 0.5, 0.0, 1.0)
        gen.add("white_balance_red", double_t, 0, "WhiteBalanceScaleRed", 1.0, 0.25, 4.0)
        gen.add("white_balance_blue", double_t, 0, "WhiteBalanceScaleBlue", 1.0, 0.25, 4.0)

        gen.add("enable_aux_controls", bool_t, 0, "AuxSensorControls", False)
        gen.add("aux_gain", double_t, 0, "AuxSensorGain", 1.0, 1.0, 8.0)
        gen.add("aux_auto_exposure", bool_t, 0, "AuxAutoExposure", True)
        gen.add("aux_auto_exposure_max_time", double_t, 0, "AuxAutoExposureMaxTime", 0.5, 0.0, 0.5);
        gen.add("aux_auto_exposure_decay", int_t, 0, "AuxAutoExposureDecay", 7, 0, 20)
        gen.add("aux_auto_exposure_thresh", double_t, 0, "AuxAutoExposureThresh", auto_exposure_threshold, 0.0, 1.0)
        gen.add("aux_auto_exposure_target_intensity", double_t, 0, "AuxAutoExposureTargetIntensity", 0.5, 0.0, 1.0)
        gen.add("aux_exposure_time", double_t, 0, "AuxExposure", 0.025, 0, 0.5)
        gen.add("aux_roi_auto_exposure", bool_t, 0, "AuxRoiAutoExposure", False)
        gen.add("aux_roi_auto_exposure_x", int_t, 0, "AuxRoiAutoExposureX", 0, 0, 1920)
        gen.add("aux_roi_auto_exposure_y", int_t, 0, "AuxRoiAutoExposureY", 0, 0, 1188)
        gen.add("aux_roi_auto_exposure_width", int_t, 0, "AuxRoiAutoExposureWidth", 0, 0, 1920)
        gen.add("aux_roi_auto_exposure_height", int_t, 0, "AuxRoiAutoExposureHeight", 0, 0, 1188)
    #endif

    if cfg.sgm:
        gen.add("stereo_post_filtering", double_t, 0, "StereoPostFilterStrength", 0.75, 0.0, 1.0);
    #endif


    if cfg.lighting:
        gen.add("lighting", bool_t, 0, "Lighting", False)
        gen.add("flash", bool_t, 0, "Flash", False)
        gen.add("led_duty_cycle", double_t, 0, "DutyCycle", 0.0, 0.0, 1.0)
    #endif

    if cfg.motor:
        gen.add("motor_speed", double_t, 0, "MotorSpeed", 0.0, 0.0, 5.2);
    #endif

    gen.add("network_time_sync", bool_t, 0, "NetworkTimeSynchronization", True);

    if cfg.name.find('sgm_AR0234') != -1:
        gen.add("ptp_time_sync", bool_t, 0, "PTPTimeSynchronization", False);
        trigger_source_enum = gen.enum([ gen.const("internal", int_t, 0, ""),
                                         gen.const("ptp", int_t, 3, "")],
                                         "Trigger sources");
        gen.add("trigger_source", int_t, 0, "Trigger Source", 0, edit_method=trigger_source_enum)

        gen.add("detail_disparity_profile", bool_t, 0, "DetailDisparityProfile", False);
        gen.add("high_contrast_profile", bool_t, 0, "HighContrastProfile", False);
        gen.add("show_roi_profile", bool_t, 0, "ShowRoiProfile", False);
        gen.add("full_res_aux_profile", bool_t, 0, "FullResAuxProfile", False);
    #endif

    if cfg.imu:
        gen.add("imu_samples_per_message", int_t, 0, "ImuSamplesPerMessage", 30, 1, 300)
        gen.add("accelerometer_enabled", bool_t, 0, "AcceleromterEnabled", True)
        a_rate_enum = gen.enum([ gen.const("10Hz__1HzCutoff", int_t, 0, ""),
                                 gen.const("25Hz__3HzCutoff", int_t, 1, ""),
                                 gen.const("50Hz__6HzCutoff", int_t, 2, ""),
                                 gen.const("100Hz__11HzCutoff", int_t, 3, ""),
                                 gen.const("200Hz__22HzCutoff", int_t, 4, ""),
                                 gen.const("400Hz__44HzCutoff", int_t, 5, ""),
                                 gen.const("1344Hz__150HzCutoff", int_t, 6, "") ],
                               "Available accelerometer rates")
        gen.add("accelerometer_rate", int_t, 0, "Accelerometer Rate", 3, edit_method=a_rate_enum)
        a_range_enum = gen.enum([ gen.const("2g__1mg_per_lsb", int_t, 0, ""),
                                  gen.const("4g__2mg_per_lsb", int_t, 1, ""),
                                  gen.const("8g__4mg_per_lsb", int_t, 2, ""),
                                  gen.const("16g__12mg_per_lsb", int_t, 3, "") ],
                                "Available acceleromter ranges")
        gen.add("accelerometer_range", int_t, 0, "Acceleromter Range", 0, edit_method=a_range_enum)
        gen.add("gyroscope_enabled", bool_t, 0, "GyroscopeEnabled", True)
        g_rate_enum = gen.enum([ gen.const("100Hz__13HzCutoff", int_t, 0, ""),
                                 gen.const("200Hz__13HzCutoff", int_t, 1, ""),
                                 gen.const("200Hz__25HzCutoff", int_t, 2, ""),
                                 gen.const("400Hz__25HzCutoff", int_t, 3, ""),
                                 gen.const("400Hz__50HzCutoff", int_t, 4, ""),
                                 gen.const("800Hz__50HzCutoff", int_t, 5, ""),
                                 gen.const("800Hz__110HzCutoff", int_t, 6, "") ],
                               "Available gyroscope rates")
        gen.add("gyroscope_rate", int_t, 0, "Gyroscope Rate", 3, edit_method=g_rate_enum)
        g_range_enum = gen.enum([ gen.const("250dps__9mdps_per_lsb", int_t, 0, ""),
                                  gen.const("500dps__18mdps_per_lsb", int_t, 1, ""),
                                  gen.const("2000dps__70mdps_per_lsb", int_t, 2, "") ], "Available gyroscope ranges")
        gen.add("gyroscope_range", int_t, 0, "Gyroscope Range", 0, edit_method=g_range_enum)
        gen.add("magnetometer_enabled", bool_t, 0, "MagnetometerEnabled", True)
        m_rate_enum = gen.enum([ gen.const("10Hz", int_t, 0, ""),
                                 gen.const("25Hz", int_t, 1, ""),
                                 gen.const("50Hz", int_t, 2, ""),
                                 gen.const("100Hz", int_t, 3, "") ],
                               "Available magnetometer rates")
        gen.add("magnetometer_rate", int_t, 0, "Magnetometer Rate", 0, edit_method=m_rate_enum)
        m_range_enum = gen.enum([ gen.const("1p3gauss__1020ugauss_per_lsb", int_t, 0, ""),
                                  gen.const("1p9gauss__1316ugauss_per_lsb", int_t, 1, ""),
                                  gen.const("2p5gauss__1667ugauss_per_lsb", int_t, 2, ""),
                                  gen.const("4p0gauss__2500ugauss_per_lsb", int_t, 3, ""),
                                  gen.const("4p7gauss__2817ugauss_per_lsb", int_t, 4, ""),
                                  gen.const("5p6gauss__3390ugauss_per_lsb", int_t, 5, ""),
                                  gen.const("8p1gauss__4878ugauss_per_lsb", int_t, 6, "") ],
                                "Available magnetometer ranges")
        gen.add("magnetometer_range", int_t, 0, "Magnetometer Range", 0, edit_method=m_range_enum);
    #endif

    clipping_enum = gen.enum([ gen.const("None", int_t, 0, "No Border Clip"),
                               gen.const("Rectangular", int_t, 1, "Rectangular Border Clip"),
                               gen.const("Circular", int_t, 2, "Circular Border Clip")],
                              "Available border clipping options")

    if "4000" in cfg.name:
        clipping_max = 400.0
    else:
        clipping_max = 200.0
    #endif

    gen.add("border_clip_type", int_t, 0, "point cloud border clip type", 0, 0, 2, edit_method=clipping_enum)
    gen.add("border_clip_value", double_t, 0, "point cloud border clip value", 0.0, 0.0, clipping_max)

    gen.add("max_point_cloud_range", double_t, 0, "max point cloud range", 15.0, 0.0, 100.0)

    gen.generate(PACKAGE, cfg.name, cfg.name)
#endfor

# BCAM
gen = ParameterGenerator();
res_enum = gen.enum([ gen.const("1280x1024", str_t, "1280x1024", "1280x1024"),
                      gen.const("640x512", str_t, "640x512", "640x512") ],
                    "Available resolution settings");
gen.add("resolution", str_t, 0, "SensorResolution", "1280x1024", edit_method=res_enum);
fps_enum = gen.enum([ gen.const("fps30",   double_t, 30.0, ""),
                      gen.const("fps15",   double_t, 15.0, ""),
                      gen.const("fps7_5",  double_t, 7.5,  ""),
                      gen.const("fps5",    double_t, 5.0,  ""),
                      gen.const("fps3_75", double_t, 3.75, "") ],
                    "Available FPS settings");
gen.add("fps", double_t, 0, "FPS", 15.0, edit_method=fps_enum)

gen.add("gain", double_t, 0, "sensor gain", 8.0, 1.0, 256.0)

gen.add("auto_exposure", bool_t, 0, "AutoExposure", True)
gen.add("auto_exposure_max_time", double_t, 0, "AutoExposureMaxTime", 0.0333, 0.0, 0.0333);
gen.add("auto_exposure_decay", int_t, 0, "AutoExposureDecay", 3, 1, 20)
gen.add("auto_exposure_thresh", double_t, 0, "AutoExposureThresh", 0.75, 0.0, 1.0)
gen.add("exposure_time", double_t, 0, "Exposure", 0.010, 0, 0.0333)

gen.add("auto_white_balance", bool_t, 0, "AutoWhiteBalance", True)
gen.add("auto_white_balance_decay", int_t, 0, "AutoWhiteBalanceDecay", 3, 1, 20)
gen.add("auto_white_balance_thresh", double_t, 0, "AutoWhiteBalanceThresh", 0.5, 0.0, 1.0)
gen.add("white_balance_red", double_t, 0, "WhiteBalanceScaleRed", 1.0, 0.25, 4.0)
gen.add("white_balance_blue", double_t, 0, "WhiteBalanceScaleBlue", 1.0, 0.25, 4.0)

gen.add("network_time_sync", bool_t, 0, "NetworkTimeSynchronization", True);
gen.generate(PACKAGE, "bcam_imx104", "bcam_imx104");

# Generate dummy dynamic reconfigure package for catkin_make install
gen.generate(PACKAGE, "multisense", "multisense");
exit
